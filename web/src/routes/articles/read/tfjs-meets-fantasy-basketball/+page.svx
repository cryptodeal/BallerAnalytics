---
title: "TensorFlow.js Meets Fantasy Basketball"
description: "Exploring the use of Tensorflow.js to project future fantasy basketball performance using historical data."
author: "James Deal"
date: "2022-04-16"
published: true
prefetch: false
categories: ['ml', 'draft', 'fantasy basketball']
---

<svelte:head>
  <title>TensorFlow.js Meets Fantasy Basketball</title>

  <meta name="description" content="Exploring the use of Tensorflow.js to project fantasy basketball performance using historical data.">
  <meta name="keywords" content="Machine Learning, ML, AI, Tensorflow, TFJS, Fantasy Basketball, NBA">

  <meta property="og:title" content="TensorFlow.js Meets Fantasy Basketball" />
  <meta property="og:description" content="Leveraging Tensorflow.js to project fantasy basketball performance." />
</svelte:head>

<script lang="ts">
	import { onMount } from 'svelte';
	import paths from '$ml/basic.json?url';
	import { trainingData } from '$lib/data/stores/trainingData';
	import LineChart from '$lib/ux/dataviz/LineChart.svelte';
	import LoaderWorker from '$lib/functions/_worker/loader?worker';

	import type { AssetLoaderMessage } from '$lib/functions/_worker/types';
	import type { GraphData } from '$lib/data/stores/types';
	import type { Readable } from 'svelte/store';
	import type { NeuralNetwork } from '@balleranalytics/tf-neat';

	let mse: GraphData,
		val_mse: GraphData,
		loss: GraphData,
		val_loss: GraphData,
		worker: Worker,
		data: ArrayBuffer,
		model: Readable<NeuralNetwork>;

	const resetData = () =>
		trainingData.set({
			mse: [],
			val_mse: [],
			loss: [],
			val_loss: []
		});

	onMount(async () => {
		resetData();
		trainingData.subscribe((value) => {
			const { mse: tMse, val_mse: vMse, loss: tLoss, val_loss: vLoss } = value;
			mse = tMse;
			val_mse = vMse;
			loss = tLoss;
			val_loss = vLoss;
		});
		worker = new LoaderWorker();
		worker.onmessage = (event: AssetLoaderMessage) => {
			const { data: tempData } = event;
			data = tempData;
			worker.terminate();
		};
		worker.postMessage({ paths });
		model = (await import('$lib/data/stores/model')).tfjs;
	});

	$: if (data !== undefined && model !== undefined)
		model.subscribe((v) => v.init(JSON.parse(new TextDecoder().decode(data))));
</script>

<h1 itemprop="name">TensorFlow.js Meets Fantasy Basketball</h1>
<h2>By: James Deal</h2>

<div>
  Using historical fantasy stats, we can train a machine learning model to predict a player's
  average fantasy points per game using their season averages from the preceding year.
</div>

<div>
  We can leverage this wealth of historical data to provide users with unparalled insight into
  their fantasy basketball lineups/rosters as well as providing additional tips for
  transactions, trades, etc.
</div>

<div>
  This enables users to continually optimize their lineups with the latest data and AI models in
  near real time.
</div>

<div>Watch as a basic model is trained using an abbreviated dataset in real time below.</div>

<div class="w-full" style="height:480px;">
  <LineChart data={mse} xLabel="Epoch" yLabel="MSE" title="onEpochEnd MSE" />
</div>

<div>
  The above chart plots the Mean Squared Error (MSE) at the end of each training Epoch (round).
</div>

<div>
  While MSE provides some insight into how the model more closely fits our dataset with time, it
  doesn't show the whole picture as it's not representing the accuracy of the model when used to
  predict an outcome from data it hasn't previously encountered.
</div>

<div>
  When training a model, we split the dataset into a training set and a validation set. The
  validation set is used as a baseline for comparison for the model to make adjustments between
  each training Epoch.
</div>

<div class="w-full" style="height:480px;">
  <LineChart data={val_mse} xLabel="Epoch" yLabel="MSE" title="onEpochEnd Val. MSE" />
</div>

<div>
  The above chart plots the Mean Squared Error (MSE) at the end of each training Epoch for the
  Validation Dataset.
</div>

<div>
  In Machine Learning, Loss is a metric used to provide a measure of how bad the model's
  prediction was on a single example. If the model's prediction is perfect, the loss is zero;
  the further from perfect, the further the loss is from zero.
</div>

<div class="w-full" style="height:480px;">
  <LineChart data={loss} xLabel="Epoch" yLabel="Loss" title="onEpochEnd Loss" />
</div>

<div>The above chart plots the Loss at the end of each training Epoch.</div>

<div>
  While Loss provides insight into the how bad any given prediction of model is, this isn't
  representative of the accuracy of the model as it's this loss value is calculated from the
  dataset used to train the model.
</div>

<div>
  We can plot the loss over time from the validation dataset in order to get a better idea of
  how bad (or, conversely, how good) each prediction of a model is.
</div>

<div class="w-full" style="height:480px;">
  <LineChart data={val_loss} xLabel="Epoch" yLabel="Loss" title="onEpochEnd Val. Loss" />
</div>
<div>
  The above chart plots the Loss at the end of each training Epoch for the Validation Dataset.
</div>

<div>
  Ultimately, we can make improvements to the model by adjusting the data inputted to the model,
  the structure of the neural network itself, or by hypertuning the training parameters used by
  the model.
</div>

<div>
  N.B. the model running for this demo is a simplified version of the proprietary
  model/algorithm used by our premium subscribers and is not intended to produce lossless
  results, but demonstrate the technologies employed.
</div>
